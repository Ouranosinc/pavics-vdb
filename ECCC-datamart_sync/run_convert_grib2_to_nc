#!/bin/sh
# Wrapper to capture run-time for convert_grib2_to_nc.py script.
#
# Setting environment variable RUN_CONVERT_GRIB2_TO_NC_LOGFILE='/path/to/logfile.log'
# will redirect all STDOUT and STDERR to that logfile so this script will be
# completely silent.
#

THIS_FILE="`realpath "$0"`"
THIS_DIR="`dirname "$THIS_FILE"`"


if [ ! -z "$RUN_CONVERT_GRIB2_TO_NC_LOGFILE" ]; then
    exec >>$RUN_CONVERT_GRIB2_TO_NC_LOGFILE 2>&1
fi

. $THIS_DIR/convert_grib2_to_nc.conf

if [ -z "$RUN_CONVERT_GRIB2_TO_NC_IMAGE" ]; then
    RUN_CONVERT_GRIB2_TO_NC_IMAGE="pavics/workflow-tests:201214"
fi


cleanup_on_exit() {
    set +x
    echo "
run_convert_grib2_to_nc finished START_TIME=$START_TIME
run_convert_grib2_to_nc finished   END_TIME=`date -Isecond`"
}

trap cleanup_on_exit EXIT


SCRIPT_TO_RUN="$THIS_DIR/convert_grib2_to_nc.py"
SCRIPT_CONFIG="$THIS_DIR/convert_grib2_to_nc.conf"


START_TIME="`date -Isecond`"
echo "==========
run_convert_grib2_to_nc START_TIME=$START_TIME"

set -x

USER_ID="`id -u`"
GROUP_ID="`id -g`"

for var in $CONFIG_ENV_VAR_PATH_LIST; do
    if [ -z "`eval echo \\$${var}`" ]; then
        eval "$var=\$${var}_DEFAULT"
    fi

    # Ensure dirs are created using current USER_ID/GROUP_ID for
    # next run to have proper write access.
    eval mkdir -p "\$$var"

    VOLUME_MOUNT_OPTS="$VOLUME_MOUNT_OPTS `eval echo "--volume \\$$var:\\$$var:rw"`"

    ENV_OPTS="$ENV_OPTS `eval echo "--env $var=\\$$var"`"
done

docker run --rm --name run_convert_grib2_to_nc \
    $VOLUME_MOUNT_OPTS \
    --volume $SCRIPT_TO_RUN:$SCRIPT_TO_RUN:ro \
    --volume $SCRIPT_CONFIG:$SCRIPT_CONFIG:ro \
    $ENV_OPTS \
    --env CONVERT_GRIB2_TO_NC_PROGRESSBAR \
    --user $USER_ID:$GROUP_ID \
    $RUN_CONVERT_GRIB2_TO_NC_IMAGE \
    python $SCRIPT_TO_RUN "$@"


# vi: tabstop=8 expandtab shiftwidth=4 softtabstop=4
